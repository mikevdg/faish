["
This is the parser, but written properly in consise Squl.

TODO: how will errors be handled?

| - concatenation
|+ - concatentation consuming optional whitespace.
|++ - concatentation consuming mandatory whitespace
; - or
nl - newline
].

[" Basic DCG rule ].
:: [ (type string) --> (type parseRule) ]..

[" Concatenate two rules. ].
:: [ (type parseRule) | (type parseRule) ] 
	(type parseRule).

[" Concatenate two rules, with optional whitespace. ].
:: [ (type parseRule) |+ (type parseRule) ]
	(type parseRule).

[" Concatencate two rules, with mandatory whitespace. ].
:: [ (type parseRule) |++ (type parseRule) ] 
	(type parseRule).

::  [ module (type module) ] 
	(type parseRule).

:: [ module_header <T> ] (type parseRule) :-
	type T [ tuple (type integer) (type integer) ].

:: [ module_separator ] (type parse_rule).
:: [ module_contents (type moduleContents) ] (type parse_rule).

module M --> 
	module_header (Version Size)
	|+ module_imports (Imports)
	|+ module_separator 
	|+ module_contents (Contents)
:-
	Version = [+1],
	create:module result:M1,
	module M1 size Size imports Imports contents Contents.

:: [ moduleHeader (type integer) ] (type parseRule).
moduleHeader Size --> ["vnd.squl v1 size=] | integer Size | nl.

:: [ module_imports (type list moduleImport) ] (type parseRule).
moduleImports [ H |= Emnut ] --> thisModule H |+ moduleImportsRest Emnut.

:: [ this_module (type moduleReference) ] (type parseRule).
thisModule M --> moduleImport M.

:: [ moduleImport (type moduleImport) ] (type parseRule).
:: [ module alias (type string) checksum (type string) ] (type moduleImport).
moduleImport (module alias A checksum C) -->  label_chars A |+ ":" |+ label_chars C |+ nl.

:: [ moduleImportsRest (type list moduleImport) ] (type parseRule).
moduleImportsRest [ H |= Emnut ]--> 
		    [ ] ; 
		    moduleImport H | moduleImportsRest Emnut.

:: [ moduleSeparator] (type parseRule).
moduleSeparator --> nl | ["--] | nl.

:: [ moduleContents ] (type parseRule).
module_contents  [ H |= Emnut ]-->
		[ ] ;
		statement H |+ statementSeparator |+ moduleContents Emnut.

:: [ statement (type softStatement) ] (type parseRule).
statement S -->
	  statement_contents S;
	  ["(] |+ statement_contents S |+ [")].

:: [ statementContents (type list clause) ] (type parseRule).
statementContents [ H ] --> clause H.
statementContents [ H |= Emnut ] --> clause H |++ statementContents Emnut.

:: [ clause (type softStatement) ] (type parseRule).
clause C --> atom C ; variable C ; literal C ; substatement C.

:: [ substatement <soft_st> ] parseRule.
substatement S --> ["(] |+ statementContents S |+ [")].

:: [ atom <string> ] soft_st.
atom [ H |=Emnut ] -> labelChar H | labelChars Emnut.

:: [ variableChars (type string) ] (type softStatement)..
variable U|=Rest --> U | labelChars Rest :-
	upperCase U
	; U = ["_].

:: [ label_chars (type string) ] (type parseRule).
labelChars C --> labelChar C.
labelChars [ H |= Emnut ] --> labelChar H | labelChars Emnut.

:: [ labelChar (type char) ] (type parseRule).
labelChar C --> C :-
	not C in ["()[].?].

:: [ literal (type literal) ] (type parseRule).
:: [ literal_char <soft_st> contents <soft_st> ] <soft_st>.
:: [ deciding_char <character>] .
:: [ literal_contents <string> ].

:: [ literal [^soft_st] ] parseRule.
:: [ literal_char [.soft_st] contents [.soft_st] ] soft_st.

:: [ deciding_char <character>] .
:: [ literal_contents <string> ].

literal ( literal_char D contents C ) --> ['[] | deciding_char D | literal_contents C | [']].

literal_contents [ H |= Emnut ] --> character H | literal_contents Emnut :-
	H ~= ['[],
	H ~= [']].

[" Allow square brackets in literals, but only if they match. ].
literal_contents [ ['[] |= Emnu =| [']] ] --> ['[] | literal_contents Emnu | [']].
